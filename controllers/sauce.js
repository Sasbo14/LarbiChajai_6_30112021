//import Sauce models
const Sauce = require('../models/Sauce');
//import file system
const fs = require('fs');

exports.createSauce = (req, res, next) => {
  //transforming information from the JSON string request into an object
  const sauceObject = JSON.parse(req.body.sauce);
  //remove id generated by mongoose
  delete sauceObject._id;
  const sauce = new Sauce({
    //spread operator to copy all elements of req.body
    ...sauceObject,
    imageUrl: `${req.protocol}://${req.get('host')}/images/${
      req.file.filename
    }`,
    likes: 0,
    dislikes: 0,
    usersDisliked: [],
    usersLiked: [],
  });

  //Check if the userId of the sauce matches that of the token to prevent anyone from creating sauces for someone else
  if (sauce.userId === req.token.userId) {
    //save the sauce in the database
    sauce
      .save()
      .then(() => {
        res.status(201).json({
          message: 'Post saved successfully!',
        });
      })
      .catch((error) => {
        res.status(400).json({
          error: error,
        });
      });
  } else {
    res
      .status(401)
      .json({ error: 'You cannot create a sauce with this userId' });
  }
};

//get a single sauce
exports.getOneSauce = (req, res, next) => {
  //FindOne method to find the unique sauce having the same _id as the query parameter
  Sauce.findOne({
    _id: req.params.id,
  })
    .then((sauce) => {
      res.status(200).json(sauce);
    })
    .catch((error) => {
      res.status(404).json({
        error: error,
      });
    });
};

exports.modifySauce = (req, res, next) => {
  //SauceObject checks if an image file already exists, if it exists we execute the code after the ternary operator otherwise the code after the ":"
  const sauceObject = req.file
    ? {
        ...JSON.parse(req.body.sauce),
        imageUrl: `${req.protocol}://${req.get('host')}/images/${
          req.file.filename
        }`,
      }
    : { ...req.body };

  // Checks if the user associated with the sauce is the one who sent the request
  if (sauceObject.userId === req.token.userId) {
    //Delete the file from the images folder and then replace it with the new image in the updateOne
    Sauce.findOne({ _id: req.params.id }).then((sauce) => {
      const filename = sauce.imageUrl.split('/images/')[1];
      //fs.unlink method which removes the image from the images folder
      fs.unlink(`images/${filename}`, (err) => {
        if (err) {
          console.log(err);
        } else {
          console.log('deleted image');
        }
      });
    });

    //UpdateOne method to update the sauce that corresponds to the object that we pass as the first argument.
    Sauce.updateOne(
      //sauce Ã  modifier
      { _id: req.params.id },
      //sauce modify, we add the id that corresponds to that of the parameters to make sure to have the same
      { ...sauceObject, _id: req.params.id }
    )
      .then(() => {
        res.status(200).json({
          message: 'Sauce updated successfully!',
        });
      })
      .catch((error) => {
        res.status(400).json({
          error: error,
        });
      });
  } else {
    res.status(401).json({
      error: 'Modification impossible, this sauce does not belong to you!',
    });
  }
};

// Remove the sauce
exports.deleteSauce = (req, res, next) => {
  // We get the sauce with the id which corresponds to the id of the parameters of the request
  Sauce.findOne({ _id: req.params.id })
    .then((sauce) => {
      // We make sure that the one who removes the sauce is the owner of the sauce
      // We therefore compare the userId with the userId of the token
      if (sauce.userId === req.token.userId) {
        const filename = sauce.imageUrl.split('/images/')[1];
        // fs.unlink method which removes the image from the images folder
        fs.unlink(`images/${filename}`, () => {
          // remove the sauce from the database
          Sauce.deleteOne({ _id: req.params.id })
            .then(() => {
              res.status(200).json({
                message: 'Sauce deleted',
              });
            })
            .catch((error) => {
              res.status(400).json({ error: error });
            });
        });
      } else {
        res.status(401).json({ error: 'This sauce does not belong to you!!!' });
      }
    })
    .catch((error) => res.status(500).json({ error }));
};

exports.getAllSauce = (req, res, next) => {
  // Find method which returns an array with all the database sauces.
  Sauce.find()
    .then((sauces) => {
      res.status(200).json(sauces);
    })
    .catch((error) => {
      res.status(400).json({ error: error });
    });
};

// Like system
exports.likeSauce = (req, res, next) => {
  const like = req.body.like;
  switch (like) {
    // Case where the user like the sauce
    case 1:
      Sauce.updateOne(
        { _id: req.params.id },
        {
          // increments a like
          $inc: { likes: +1 },
          // Add the id to the array of like
          $push: { usersLiked: req.body.userId },
          _id: req.params.id,
        }
      )
        .then(() => res.status(200).json({ message: 'You like this sauce' }))
        .catch((error) => res.status(400).json({ error }));
      break;

    // Case where the user does not like the sauce
    case -1:
      Sauce.updateOne(
        { _id: req.params.id },
        {
          $inc: { dislikes: +1 },
          $push: { usersDisliked: req.body.userId },
          _id: req.params.id,
        }
      )
        .then(() => res.status(200).json({ message: 'You hate this sauce' }))
        .catch((error) => res.status(400).json({ error }));
      break;

    // Case where the user cancels his like / dislike
    case 0:
      Sauce.findOne({ _id: req.params.id })
        .then((sauce) => {
          if (
            sauce.usersLiked.find(
              (user) => user === req.body.userId && req.body.like === 0
            )
          ) {
            Sauce.updateOne(
              { _id: req.params.id },
              {
                $inc: { likes: -1 },
                $pull: { usersLiked: req.body.userId },
                _id: req.params.id,
              }
            )
              .then(() =>
                res.status(201).json({
                  message: 'Your opinion has been taken into account!',
                })
              )
              .catch((error) => res.status(400).json({ error }));
          } else if (
            sauce.usersDisliked.find(
              (user) => user === req.body.userId && req.body.like === 0
            )
          ) {
            Sauce.updateOne(
              { _id: req.params.id },
              {
                $inc: { dislikes: -1 },
                $pull: { usersDisliked: req.body.userId },
                _id: req.params.id,
              }
            )
              .then(() =>
                res.status(201).json({
                  message: 'Your opinion has been taken into account!',
                })
              )
              .catch((error) => res.status(400).json({ error }));
          }
        })
        .catch((error) => {
          res.status(400).json({ error });
        });
      break;
  }
};
